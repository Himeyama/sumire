#!/usr/bin/env ruby
# frozen_string_literal: true

require "sumire"
require "listen"
require "optparse"
require "sys/proctable"
require "securerandom"
require "fileutils"

@i18n = {
  "en": {
    "arg_less_one": "The number of arguments must be less than or equal to 1",
    "output_log": "Output logs to standard output",
    "save_log": "Save the log to a file",
    "exist_process": "The `script` process exists\nExecute the following command to stop the process",
    "option_not_appropriate": "Option is not appropriate",
    "start_recording": "\e[31;1m● Start recording\e[0m",
    "EOR": "\e[31;1m■ End of record\e[0m",
    "specify_dir": "Specify the directory",
    "no_directory": "\e[31mDirectory does not exist\e[0m",
    "save_to": "Save to: ",
    "version_info": "Display version information",
    "arg_command": "Run the command rather than an interactive shell",
    "license_info": "Displays license information"
  },
  "ja": {
    "arg_less_one": "引数の個数は 1 個以下でなければなりません",
    "output_log": "標準出力に表示します",
    "save_log": "ログファイルに記録します",
    "exist_process": "`script` プロセスが存在しています\n以下のコマンドを実行してプロセスを停止してください。",
    "option_not_appropriate": "オプションが適切ではありません\n次のコマンドを実行し使い方を確認して下さい\n\e[32m#{File.basename($PROGRAM_NAME)} -h\e[0m",
    "start_recording": "\e[31;1m● 記録を開始します\e[0m",
    "EOR": "\e[31;1m■ 記録を終了します\e[0m",
    "specify_dir": "ディレクトリを指定します",
    "no_directory": "\e[31mディレクトリが存在しません\e[0m",
    "save_to": "保存先: ",
    "version_info": "バージョン情報を表示します",
    "arg_command": "コマンドではなくシェルを実行します",
    "license_info": "ソフトウェアのライセンス情報を表示します"
  }
}

def comment(tag)
  lang = :en
  lang = :ja if ENV["LANG"].downcase.include?("ja")
  @i18n[lang][tag]
end

# rubocop:disable Metrics/MethodLength,Metrics/AbcSize,Metrics/CyclomaticComplexity,Metrics/PerceivedComplexity, Lint/MissingCopEnableDirective
def main(**kwargs)
  dir = kwargs[:directory]
  dir = "." if dir.nil? || dir.empty?
  dir = dir.sub(%r{/\z}, "")

  command = kwargs[:command]
  command = command ? " -c \"#{command}\"" : ""

  verbose = kwargs[:verbose] || false

  unless verbose
    processes = Sys::ProcTable.ps
    processes.each do |process|
      next unless process.cmdline.match(/^script/)

      warn("#{comment(:exist_process)}\n\n")
      warn("\e[32mkill #{process.pid}\e[0m")
      exit(false)
    end
  end

  dst = "#{dir}/#{Time.now.strftime("%Y%m%d_%H%M%S")}.log"
  dst = File.expand_path(dst)
  print(comment(:save_to))
  puts(dst)
  puts(comment(:start_recording))

  FileUtils.mkdir_p("/tmp/sumire")
  tmp = "/tmp/sumire/#{SecureRandom.uuid}.log"
  tmp = Pathname(Dir.pwd).join("typescript").to_path if verbose
  thread = Thread.new do
    Sumire::Sumire.exec(destination: dst, target: tmp, verbose: verbose)
  end
  thread.join if verbose

  script_cmd = "script -f #{tmp}#{command}"
  system(script_cmd) unless verbose

  puts(comment(:EOR))
end

opt = OptionParser.new
verbose = false
dir = "."
cmd = nil

opt.on("-V", "--version", comment(:version_info)) do |_v|
  puts("#{File.basename($PROGRAM_NAME)} (#{Sumire::VERSION})")
  exit(true)
end

opt.on("--license", comment(:license_info)) do |_v|
  puts(Sumire::COPYRIGHT)
  exit(true)
end

opt.on("-v", "--verbose", comment(:output_log)) do |v|
  verbose = v
end

opt.on("-c [Command]", "--command", comment(:arg_command)) do |command|
  cmd = command
end

opt.on("-d [Directory]", "--directory", comment(:specify_dir)) do |directory|
  dir = directory
end

begin
  opt.parse!(ARGV)
rescue OptionParser::InvalidOption
  warn(comment(:option_not_appropriate))
  exit(false)
end

main(directory: dir, verbose: verbose, command: cmd)
